name: backend-lint-and-test
on:
  pull_request:
    branches:
      - master
      - main
    paths:
      - '**.py'
      - '**/pyproject.toml'
      - '**/poetry.lock'
      - '**/requirements.txt'
      - '**.requirements.in'
  push:
    branches:
      - master
      - main
jobs:
  linting:
    strategy:
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.11" ]
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
        # Check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      # Install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # Load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # Install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry lock --check
          poetry install --with dev --no-root --no-interaction
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - name: Lint
        run: |
          ls -la
          source .venv/bin/activate
          flake8 .
          black . --check
          isort .
  test:
    needs: linting
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]
        python-version: [ "3.9", "3.10", "3.11" ]
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      # Check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      # Install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # Load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # Install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry lock --check
          poetry install --no-interaction --no-root
      #----------------------------------------------
      # Add matrix specifics and run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          coverage run -m unittest
          coverage report
      #----------------------------------------------
      # Upload coverage stats
      #----------------------------------------------
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
